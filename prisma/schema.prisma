// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String?  @unique
  passwordHash String? @map("password_hash")
  name      String?
  picture   String?
  role      String   @default("user")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Audit {
  id        String   @id @default(cuid())
  siteUrl   String   @map("site_url")
  siteType  String   @map("site_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  results   AuditResult[]
  history   AuditHistory[]

  @@map("audits")
}

model AuditResult {
  id          String   @id @default(cuid())
  auditId     String   @map("audit_id")
  resultsData Json     @map("results_data")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  audit       Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@map("audit_results")
}

model AuditHistory {
  id          String   @id @default(cuid())
  auditId     String   @map("audit_id")
  metricName  String   @map("metric_name")
  metricValue Float    @map("metric_value")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  audit       Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@map("audit_history")
}

model AuditComparison {
  id            String   @id @default(cuid())
  baseAuditId   String   @map("base_audit_id")
  compareAuditId String  @map("compare_audit_id")
  comparisonData Json    @map("comparison_data")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("audit_comparisons")
}

// Google Search Console persistent storage (last ~16 months)

model GscProperty {
  siteUrl   String   @id @map("site_url")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("gsc_property")
}

model GscSyncStatus {
  id              String   @id @default(cuid())
  siteUrl         String   @map("site_url")
  searchType      String   @map("search_type")
  dimension       String   @map("dimension") // totals, page, query, device, country, appearance
  lastSyncedDate  DateTime? @map("last_synced_date")
  lastRunAt       DateTime? @map("last_run_at")
  status          String?  // ok, running, error
  message         String?

  @@index([siteUrl, searchType, dimension], map: "idx_gsc_sync_status")
  @@map("gsc_sync_status")
}

model GscTotalsDaily {
  siteUrl    String   @map("site_url")
  date       DateTime @map("date")
  searchType String   @map("search_type")
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, date, searchType])
  @@index([siteUrl, date], map: "idx_gsc_totals_daily_site_date")
  @@map("gsc_totals_daily")
}

model GscPagesDaily {
  siteUrl    String   @map("site_url")
  date       DateTime @map("date")
  searchType String   @map("search_type")
  page       String
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, date, searchType, page])
  @@index([siteUrl, date, page], map: "idx_gsc_pages_daily_site_date_page")
  @@map("gsc_pages_daily")
}

model GscQueriesDaily {
  siteUrl    String   @map("site_url")
  date       DateTime @map("date")
  searchType String   @map("search_type")
  query      String
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, date, searchType, query])
  @@index([siteUrl, date, query], map: "idx_gsc_queries_daily_site_date_query")
  @@map("gsc_queries_daily")
}

model GscDeviceDaily {
  siteUrl    String   @map("site_url")
  date       DateTime @map("date")
  searchType String   @map("search_type")
  device     String
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, date, searchType, device])
  @@index([siteUrl, date, device], map: "idx_gsc_device_daily_site_date_device")
  @@map("gsc_device_daily")
}

model GscCountryDaily {
  siteUrl    String   @map("site_url")
  date       DateTime @map("date")
  searchType String   @map("search_type")
  country    String
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, date, searchType, country])
  @@index([siteUrl, date, country], map: "idx_gsc_country_daily_site_date_country")
  @@map("gsc_country_daily")
}

model GscAppearanceRange {
  siteUrl    String   @map("site_url")
  searchType String   @map("search_type")
  appearance String
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  clicks     Int
  impressions Int
  ctr        Float
  position   Float

  @@id([siteUrl, searchType, appearance, startDate, endDate])
  @@index([siteUrl, startDate, endDate], map: "idx_gsc_appearance_range_site_period")
  @@map("gsc_appearance_range")
}

// Persisted OAuth tokens and user selection for GSC
model GscOAuthToken {
  userId       Int      @id @map("user_id")
  accessToken  String?  @map("access_token")
  refreshToken String?  @map("refresh_token")
  scope        String?  @map("scope")
  tokenType    String?  @map("token_type")
  expiryDate   DateTime? @map("expiry_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("gsc_oauth_token")
}

model GscUserSelection {
  userId    Int      @id @map("user_id")
  siteUrl   String   @map("site_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("gsc_user_selection")
}

// Properties a user has opted-in for background syncing
model GscUserProperty {
  id               String   @id @default(cuid())
  userId           Int      @map("user_id")
  siteUrl          String   @map("site_url")
  enabled          Boolean  @default(true)
  priorityOrder    Int      @default(0) @map("priority_order")
  syncIntervalHours Int     @default(24) @map("sync_interval_hours")
  lastFullSyncAt   DateTime? @map("last_full_sync_at")
  nextSyncDueAt    DateTime? @map("next_sync_due_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([userId, siteUrl], map: "uniq_user_property")
  @@index([nextSyncDueAt, priorityOrder], map: "idx_due_order")
  @@map("gsc_user_properties")
}

// Cooperative lock to ensure only one scheduler processes at a time
model GscSyncLock {
  id          String   @id
  lockedUntil DateTime? @map("locked_until")
  lockedBy    String?  @map("locked_by")

  @@map("gsc_sync_lock")
}

// Bing Webmaster Tools integration (API key based)
model BingApiKey {
  userId    Int      @id @map("user_id")
  apiKey    String   @map("api_key")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bing_api_key")
}

model BingUserSelection {
  userId    Int      @id @map("user_id")
  siteUrl   String   @map("site_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bing_user_selection")
}